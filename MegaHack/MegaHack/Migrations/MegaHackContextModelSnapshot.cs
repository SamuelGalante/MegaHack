// <auto-generated />
using System;
using MegaHack.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MegaHack.Migrations
{
    [DbContext(typeof(MegaHackContext))]
    partial class MegaHackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.3.20181.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MegaHack.Entity.Appointment.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("MegaHack.Entity.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diary");
                });

            modelBuilder.Entity("MegaHack.Entity.User.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("MegaHack.Entity.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasCheckConstraint("CK_User_Gender_Enum_Constraint", "[Gender] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_User_Type_Enum_Constraint", "[Type] IN(0, 1)");
                });

            modelBuilder.Entity("MegaHack.Entity.User.Patient", b =>
                {
                    b.HasBaseType("MegaHack.Entity.User.User");

                    b.Property<int?>("ProfessionalId")
                        .HasColumnType("int");

                    b.HasIndex("ProfessionalId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("MegaHack.Entity.User.Professional", b =>
                {
                    b.HasBaseType("MegaHack.Entity.User.User");

                    b.Property<string>("CRP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CareerTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Specialty")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Professional");

                    b.HasCheckConstraint("CK_User_Specialty_Enum_Constraint", "[Specialty] IN(0, 1, 2, 3, 4, 5, 6)");
                });

            modelBuilder.Entity("MegaHack.Entity.Appointment.Appointment", b =>
                {
                    b.HasOne("MegaHack.Entity.User.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("MegaHack.Entity.User.Professional", "Professional")
                        .WithMany("Appointments")
                        .HasForeignKey("ProfessionalId");
                });

            modelBuilder.Entity("MegaHack.Entity.User.Diagnosis", b =>
                {
                    b.HasOne("MegaHack.Entity.User.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("MegaHack.Entity.User.Professional", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId");
                });

            modelBuilder.Entity("MegaHack.Entity.User.Patient", b =>
                {
                    b.HasOne("MegaHack.Entity.User.Professional", null)
                        .WithMany("Patients")
                        .HasForeignKey("ProfessionalId");
                });
#pragma warning restore 612, 618
        }
    }
}
